/*
 * Books API
 *
 * This web service offers information on books
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"path"
)

var dummyBook *Book
var books = []Book{
	Book{
		BookId:    "Book1",
		Title:     "Operating System Concepts",
		Edition:   "9th",
		Copyright: "2012",
		Language:  "ENGLISH",
		Pages:     "976",
		Authors: []Author{
			Author{
				AuthorId:    "Author1",
				Name:        "Abraham Silberschatz",
				Nationality: "US",
				Birth:       "1960-01-11",
				Genere:      "Technology",
				Books:       dummyBook,
			},
		},
		Publishers: []Publisher{
			Publisher{
				PublisherId: "Publisher1",
				Name:        "John Wiley & Sons",
				Country:     "US",
				Founded:     "2012",
				Genere:      "Technology",
				Books:       dummyBook,
			},
		},
	},
	Book{
		BookId:    "Book2",
		Title:     "Computer Networks",
		Edition:   "5th",
		Copyright: "2010",
		Language:  "ENGLISH",
		Pages:     "960",
		Authors: []Author{
			Author{
				AuthorId:    "Author2",
				Name:        "Andrew S. Tanenbaum",
				Nationality: "US",
				Birth:       "1970-02-11",
				Genere:      "Technology",
				Books:       dummyBook,
			},
		},
		Publishers: []Publisher{
			Publisher{
				PublisherId: "Publisher2",
				Name:        "Andrew S. Tanenbaum",
				Country:     "US",
				Founded:     "2010",
				Genere:      "Technology",
				Books:       dummyBook,
			},
		},
	},
}

var authors = []Author{}
var publishers = []Publisher{}

func populateLists() {
	if len(authors) == 0 && len(publishers) == 0 {
		for _, book := range books {
			for _, author := range book.Authors {
				author.Books = &book
				authors = append(authors, author)
			}
			for _, publisher := range book.Publishers {
				publisher.Books = &book
				publishers = append(publishers, publisher)
			}
		}
	}
}

func findBook(x string) int {
	for i, book := range books {
		if x == book.BookId {
			return i
		}
	}
	return -1
}

func findAuthor(x string) int {
	for i, element := range authors {
		if x == element.AuthorId {
			return i
		}
	}
	return -1
}

func findPublisher(x string) int {
	for i, element := range publishers {
		if x == element.PublisherId {
			return i
		}
	}
	return -1
}

func AuthorsAuthorIdDelete(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if i == -1 {
		w.WriteHeader(http.StatusBadRequest)
	} else {
		authors = append(authors[:i], authors[i+1:]...)
		w.WriteHeader(http.StatusOK)
	}
}

func AuthorsAuthorIdGet(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	if i == -1 {
		return
	}
	dataJson, _ := json.Marshal(authors[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func AuthorsAuthorIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorsPost(w http.ResponseWriter, r *http.Request) {
	populateLists()
	var author Author
	err := json.NewDecoder(r.Body).Decode(&author)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	authors = append(authors, author)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdDelete(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findBook(id)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if i == -1 {
		w.WriteHeader(http.StatusBadRequest)
	} else {
		books = append(books[:i], books[i+1:]...)
		w.WriteHeader(http.StatusOK)
	}
}

func BooksBookIdGet(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findBook(id)
	if i == -1 {
		return
	}
	dataJson, _ := json.Marshal(books[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func BooksBookIdPut(w http.ResponseWriter, r *http.Request) {
	populateLists()
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func BooksPost(w http.ResponseWriter, r *http.Request) {
	populateLists()
	var book Book
	err := json.NewDecoder(r.Body).Decode(&book)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	books = append(books, book)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublishersPost(w http.ResponseWriter, r *http.Request) {
	populateLists()
	var publisher Publisher
	err := json.NewDecoder(r.Body).Decode(&publisher)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	publishers = append(publishers, publisher)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublishersPublisherIdDelete(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if i == -1 {
		w.WriteHeader(http.StatusBadRequest)
	} else {
		publishers = append(publishers[:i], publishers[i+1:]...)
		w.WriteHeader(http.StatusOK)
	}
}

func PublishersPublisherIdGet(w http.ResponseWriter, r *http.Request) {
	populateLists()
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	if i == -1 {
		return
	}
	dataJson, _ := json.Marshal(publishers[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func PublishersPublisherIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
